package com.springboot.CRMBoot.dao;

import java.util.List;

import javax.persistence.EntityManager;

import org.hibernate.Session;
import org.hibernate.query.Query;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import com.springboot.CRMBoot.entity.Employeeboot;

@Repository
public class CustomerDaoImpl implements CustomerDao {

	// entity manager auto generated by spring
	private EntityManager entityManager;
	private List resultList;

	// using jpa query language instead of hibernateql

	// construction injection
	@Autowired
	public CustomerDaoImpl(EntityManager entityManager) {
		super();
		this.entityManager = entityManager;
	}

	@Override
	@Transactional
	public List<Employeeboot> getAll() {
		// TODO Auto-generated method stub

		// get current hibernate session
		Session currentSession = entityManager.unwrap(Session.class);

		// create query//get it from org.hibernate.query

		Query<Employeeboot> thequery = currentSession.createQuery("from Employeeboot", Employeeboot.class);

		// execute query and get result list

		List<Employeeboot> employees = thequery.getResultList();

		// return

		// if jpaqery languaage

//		javax.persistence.Query thejpaQuery = entityManager.createQuery("from Employeeboot");
//
//		List<Employeeboot> employees2 = thejpaQuery.getResultList();

		return employees;
	}

	@Override
	@Transactional
	public Employeeboot getbyId(int id) {
		// TODO Auto-generated method stub
		Session currentSession = entityManager.unwrap(Session.class);

		Employeeboot theEmployee = currentSession.get(Employeeboot.class, id);
		//with jpa
		//Employeeboot theEmployee2 = entityManager.find(Employeeboot.class, id);

		return theEmployee;
	}

	@Override
	@Transactional
	public void addEmployee(Employeeboot e) {
		// TODO Auto-generated method stub
		Session currentSession = entityManager.unwrap(Session.class);
		
	//Employeeboot empadedobj=	entityManager.merge(e);
		//
	//e.setId(empadedobj.getId()); //for future reference
		
		currentSession.saveOrUpdate(e);
	}

	@Override
	@Transactional
	public void deleteEmployee(int id) {
		// TODO Auto-generated method stub

		Session currentSession = entityManager.unwrap(Session.class);

		Employeeboot empobj = currentSession.get(Employeeboot.class, id);
		
		//entityManager.remove(empobj);

		currentSession.delete(empobj);
	}

}
